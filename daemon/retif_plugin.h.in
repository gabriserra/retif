#ifndef RETIF_PLUGIN_H
#define RETIF_PLUGIN_H

// TODO: REMOVE
#include "retif_config.h"

// -----------------------------------------------------------------------------
// PLUGINS MACROS / CONSTANTS
// -----------------------------------------------------------------------------

#define PLUGIN_CFG "@RETIF_CONF_PATH@"
#define PLUGIN_DEFAULT_INSTALLPATH "@RETIF_PLUGINS_PATH@/"

// -----------------------------------------------------------------------------
// SYMBOLS TO LOAD FROM LIBRARIES
// -----------------------------------------------------------------------------

#define RTF_API_INIT "rtf_plg_task_init"
#define RTF_API_ACCEPT "rtf_plg_task_accept"
#define RTF_API_CHANGE "rtf_plg_task_change"
#define RTF_API_RELEASE "rtf_plg_task_release"
#define RTF_API_SCHEDULE "rtf_plg_task_schedule"
#define RTF_API_ATTACH "rtf_plg_task_attach"
#define RTF_API_DETACH "rtf_plg_task_detach"

// forward declarations, see retif_task.c and retif_taskset.c
struct rtf_task;
struct rtf_taskset;
struct rtf_plugin;

/**
 * @brief Used by plugin to initializes itself
 */
typedef int (*rtf_plg_task_init_pfun)(struct rtf_plugin *);

/**
 * @brief Used by plugin to perform a new task admission test
 */
typedef int (*rtf_plg_task_accept_pfun)(struct rtf_plugin *,
    struct rtf_taskset *, struct rtf_task *);

/**
 * @brief Used by plugin to perform a new admission test when task modifies
 * parameters
 */
typedef int (*rtf_plg_task_change_pfun)(struct rtf_plugin *,
    struct rtf_taskset *, struct rtf_task *);

/**
 * @brief Used by plugin to perform a release of previous accepted task
 */
typedef int (*rtf_plg_task_release_pfun)(struct rtf_plugin *,
    struct rtf_taskset *, struct rtf_task *);

/**
 * @brief Used by plugin to set the task as accepted
 */
typedef void (*rtf_plg_task_schedule_pfun)(struct rtf_plugin *,
    struct rtf_taskset *, struct rtf_task *);

/**
 * @brief Used by plugin to set rt scheduler for a task
 */
typedef int (*rtf_plg_task_attach_pfun)(struct rtf_task *);

/**
 * @brief Used by plugin to reset scheduler (other) for a task
 */
typedef int (*rtf_plg_task_detach_pfun)(struct rtf_task *);

/**
 * @brief Plugin data structure, common to all plugins
 */
struct rtf_plugin
{
    int id;
    char *name;
    char *path;
    void *dl_ptr;
    int prio_min;
    int prio_max;
    int *cpulist;
    int cputot;
    float *util_free_percpu;
    int *task_count_percpu;
    struct rtf_taskset *tasks;
    rtf_plg_task_init_pfun rtf_plg_task_init;
    rtf_plg_task_accept_pfun rtf_plg_task_accept;
    rtf_plg_task_change_pfun rtf_plg_task_change;
    rtf_plg_task_release_pfun rtf_plg_task_release;
    rtf_plg_task_schedule_pfun rtf_plg_task_schedule;
    rtf_plg_task_attach_pfun rtf_plg_task_attach;
    rtf_plg_task_detach_pfun rtf_plg_task_detach;
};

// -----------------------------------------------------------------------------
// PUBLIC METHODS
// -----------------------------------------------------------------------------

/**
 * @brief Initializes plugin data structure
 *
 * Initializes plugins data structure reading settings from config file and
 * loading dynamically symbols from shared lib. Return -1 if unable to open
 * config file or options specified are not valid, 0 in case of success.
 *
 * @param plgs pointer to plugin structure that will be initialized
 * @param num_of_plugins number of plugins found
 * @return -1 in case of error, 0 in case of success
 */
int rtf_plugins_init(vector_conf_plugin_t *confs, struct rtf_plugin **plgs,
    int *num_of_plugins);

/**
 * @brief Tear down plugin data structure
 *
 * Closes dynamic library opened in init phase and free allocated memory.
 * Must be used when tearing down daemon.
 *
 * @param plgs pointer to plugin structure that will be freed
 * @param plugin_num number of plugins that need to be freed
 */
void rtf_plugins_destroy(struct rtf_plugin *plgs, int plugin_num);

#endif /* RETIF_PLUGIN_H */
