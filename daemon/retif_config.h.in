/**
 * @file retif_config.h
 * @author Gabriele Serra
 * @date 03 Jan 2020
 * @brief Allows to configure kernel parameters for real-time scheduling
 */

#pragma once
#ifndef RETIF_CONFIG_H
#define RETIF_CONFIG_H

#include "vector.h"

#define SETTINGS_CFG "@RETIF_CONF_PATH@"

#define PROC_RT_PERIOD_FILE "/proc/sys/kernel/sched_rt_period_us"
#define PROC_RT_RUNTIME_FILE "/proc/sys/kernel/sched_rt_runtime_us"
#define PROC_RR_TIMESLICE_FILE "/proc/sys/kernel/sched_rr_timeslice_ms"

// ====================================================== //
// ------------------ Data Structures ------------------- //
// ====================================================== //

typedef struct proc_backup
{
    long rr_timeslice;
    long rt_runtime;
} proc_backup_t;

typedef struct conf_system
{
    long rr_timeslice; // ms
    double sched_max_util; // between 0 and 1
} conf_system_t;

typedef struct conf_plugin
{
    char *name;
    char *plugin_path;
    int priority_min;
    int priority_max;
    VECTOR(int) cores;
} conf_plugin_t;

typedef struct acl_properties
{
    double max_utilization;
    long max_runtime;
    long min_period;
    long max_period;
    long min_deadline;
    long max_deadline;
    long min_priority;
    long max_priority;
    bool ignore_adm_test;
} acl_properties_t;

typedef enum acl_domain_kind
{
    ACL_DOMAIN_USER = 0,
    ACL_DOMAIN_GROUP,
    ACL_DOMAIN_NUMBER,
} domain_kind_t;

typedef struct conf_acl_rule
{
    char *domain;
    char *type; // TYPE
    char *plugin_name;
    acl_properties_t properties;
} conf_acl_rule_t;

typedef VECTOR(conf_plugin_t) vector_conf_plugin_t;
typedef VECTOR(conf_acl_rule_t) vector_acl_rule_t;

typedef struct configuration
{
    conf_system_t system;
    vector_conf_plugin_t plugins;
    vector_acl_rule_t acl_rules;
} configuration_t;

extern int set_rt_kernel_params(conf_system_t *c);
extern int save_rt_kernel_params(struct proc_backup *b);
extern int restore_rt_kernel_params(struct proc_backup *b);
extern int parse_configuration(configuration_t *conf, const char path[]);

#endif // RETIF_CONFIG_H
